using LearnOpenTK.Common;
using OpenTK.Mathematics;
using OpenTK.Windowing.Common;
using OpenTK.Windowing.Desktop;
using OpenTK.Graphics.OpenGL4;
using System;
using System.Collections.Generic;
using System.Text;
using OpenTK.Windowing.GraphicsLibraryFramework;

namespace CobaCamera
{
    class Windows : GameWindow
    {
        private float[] m_vertices =
        {
            //Position      //texture
            0.5f, 0.5f, 0.0f, 1.0f, 1.0f,
            0.5f, -0.5f, 0.0f, 1.0f, 0.0f,
            -0.5f, -0.5f, 0.0f, 0.0f, 0.0f,
            -0.5f, 0.5f, 0.0f, 0.0f, 1.0f
        };

        private uint[] m_indices =
        {
            0, 1, 3,
            1, 2, 3
        };

        private int m_vertexBufferObject;
        private int m_vertexArrayObject;
        private Shader m_shader;

        private int m_elementBufferObject;
        private Texture m_texture;

        //Camera
        private Camera m_camera;

        public Windows(GameWindowSettings gameWindowSettings, NativeWindowSettings nativeWindowSettings)
            : base(gameWindowSettings, nativeWindowSettings)
        {

        }

        protected override void OnLoad()
        {
            GL.ClearColor(0.2f, 0.3f, 0.3f, 1.0f);

            //VBO
            m_vertexBufferObject = GL.GenBuffer();
            GL.BindBuffer(BufferTarget.ArrayBuffer, m_vertexBufferObject);
            GL.BufferData(BufferTarget.ArrayBuffer, m_vertices.Length * sizeof(float),
                m_vertices, BufferUsageHint.StaticDraw);

            //Shader
            m_shader = new Shader("C:/Users/vince/source/repos/Grafkom2/CobaCamera/Shaders/shader.vert",
                "C:/Users/vince/source/repos/Grafkom2/CobaCamera/Shaders/shader.frag");
            m_shader.Use();

            //EBO
            m_elementBufferObject = GL.GenBuffer();
            GL.BindBuffer(BufferTarget.ElementArrayBuffer, m_elementBufferObject);
            GL.BufferData(BufferTarget.ElementArrayBuffer, m_indices.Length * sizeof(uint),
                m_indices, BufferUsageHint.StaticDraw);

            //VAO
            m_vertexArrayObject = GL.GenVertexArray();
            GL.BindVertexArray(m_vertexArrayObject);
            var vertexPosition = m_shader.GetAttribLocation("aPosition");
            GL.EnableVertexAttribArray(vertexPosition);
            GL.VertexAttribPointer(vertexPosition, 3,
                VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);

            //Texture Coordinate
            var texCoordLocation = m_shader.GetAttribLocation("aTexCoord");
            GL.EnableVertexAttribArray(texCoordLocation);
            GL.VertexAttribPointer(texCoordLocation, 2,
               VertexAttribPointerType.Float, false, 5 * sizeof(float), 3 * sizeof(float));

            //Texture
            m_texture = Texture.LoadFromFile("C:/Users/vince/source/repos/Grafkom2/CobaCamera/Resources/wood.jpg");
            m_texture.Use(TextureUnit.Texture0);

            //Camera
            m_camera = new Camera(Vector3.UnitZ * 2, Size.X / (float)Size.Y);

            base.OnLoad();
        }

        protected override void OnRenderFrame(FrameEventArgs args)
        {            
            GL.Clear(ClearBufferMask.ColorBufferBit);

            //Texture
            GL.BindVertexArray(m_vertexArrayObject);
            m_texture.Use(TextureUnit.Texture0);

            //Camera
            var transform = Matrix4.Identity;
            m_shader.SetMatrix4("transform", transform);
            m_shader.SetMatrix4("view", m_camera.GetViewMatrix());
            m_shader.SetMatrix4("projection", m_camera.GetProjectionMatrix());
            GL.DrawElements(PrimitiveType.Triangles, m_indices.Length, DrawElementsType.UnsignedInt, 0);
            m_shader.Use();

            SwapBuffers();
            base.OnRenderFrame(args);
        }

        protected override void OnUpdateFrame(FrameEventArgs args)
        {
            const float cameraSpeed = 1.5f;
            if(KeyboardState.IsKeyDown(Keys.W))
            {
                m_camera.Position += m_camera.Front * cameraSpeed;
            }
            else if (KeyboardState.IsKeyDown(Keys.S))
            {
                m_camera.Position -= m_camera.Front * cameraSpeed;
            }
            base.OnUpdateFrame(args);
        }
    }
}
